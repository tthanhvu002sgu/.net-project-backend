using DoAn_API.Services;
using Microsoft.AspNetCore.Mvc;

namespace DoAn_API.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class DoctorController : Controller

    {
        private readonly IDoctorRepository _doctorRepository;

        public DoctorController(IDoctorRepository doctorRepository)
        {
            _doctorRepository = doctorRepository ?? throw new ArgumentNullException(nameof(doctorRepository));
        }
        [HttpGet]

        public async Task<IActionResult> GetAllDoctors()
        {
            try
            {
                var doctors = await _doctorRepository.GetAllDoctorsAsync();
                return Ok(doctors);
            }
            catch (Exception ex)
            {

                return StatusCode(500, $"Error retrieving doctors: {ex.Message}");
            }
        }
        [HttpGet("{email}")]
        public async Task<IActionResult> GetDoctorByEmail(string email)
        {
            try
            {
                var doctor = await _doctorRepository.GetDoctorByEmail(email);
                if (doctor == null)
                {
                    return NotFound();
                }
                return Ok(doctor);
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }
        [HttpGet("get-by-specialization")]
        public async Task<IActionResult> GetDoctorsBySpecializationName(string specializationName)
        {
            try
            {
                var doctors = await _doctorRepository.GetDoctorsBySpecializationAsync(specializationName);
                if (doctors == null || !doctors.Any())
                {
                    return NotFound("No doctors found for this specialization.");
                }

                return Ok(doctors);
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }

        [HttpPut("update-availability")]
        public async Task<IActionResult> UpdateAvailability([FromQuery] string doctorEmail, [FromQuery] bool isAvailable)
        {
            var result = await _doctorRepository.UpdateAvailabilityAsync(doctorEmail, isAvailable);
            if (result)
            {
                return Ok(new { message = "Doctor availability updated successfully." });
            }
            return NotFound(new { message = "Doctor not found." });
        }
    }



}
